<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Easygo_Space</title>
  
  <subtitle>The quick brown fox jumps over the lazy dog.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mlone.top/"/>
  <updated>2019-09-11T15:40:14.096Z</updated>
  <id>https://mlone.top/</id>
  
  <author>
    <name>easy go</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Class.forName和ClassLoader有什么区别？</title>
    <link href="https://mlone.top/2019/09/11/Class-forName%E5%92%8CClassLoader%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <id>https://mlone.top/2019/09/11/Class-forName和ClassLoader有什么区别？/</id>
    <published>2019-09-11T15:02:44.000Z</published>
    <updated>2019-09-11T15:40:14.096Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;mid=2247488216&amp;idx=2&amp;sn=221b30554352cc71c3eeaacd2f22a067&amp;chksm=e8fe8ed1df8907c703e642a83c36f29a5b8638e544ee13d018be230543a15a6d1e450238abd5&amp;mpshare=1&amp;scene=1&amp;srcid=&amp;sharer_sharetime=1566828808925&amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd" target="_blank" rel="noopener">面试题：Class.forName 和 ClassLoader 有什么区别？</a><br><a id="more"></a></p><p>　　在 java 中 Class.forName() 和 ClassLoader 都可以对类进行加载。ClassLoader 就是遵循双亲委派模型最终调用启动类加载器的类加载器，实现的功能是“通过一个类的全限定名来获取描述此类的二进制字节流”，获取到二进制流后放到 JVM 中。Class.forName() 方法实际上也是调用的 CLassLoader 来实现的。<br>　　Class.forName(String className)；这个方法的源码是：<br>　　<img src="/blogImg/2019/9/11/1-1.png" alt></p><p>　　最后调用的方法是 forName0 这个方法，在这个 forName0 方法中的第二个参数被默认设置为了 true，这个参数代表是否对加载的类进行初始化，设置为 true 时会类进行初始化，代表会执行类中的静态代码块，以及对静态变量的赋值等操作。</p><p>　　也可以调用 Class.forName(String name, boolean initialize,ClassLoader loader) 方法来手动选择在加载类的时候是否要对类进行初始化。Class.forName(String name, boolean initialize,ClassLoader loader) 的源码如下：<br>　　<img src="/blogImg/2019/9/11/1-2.png" alt></p><p>　　源码中的注释只摘取了一部分，其中对参数 initialize 的描述是：if {@code true} the class will be initialized. 意思就是说：如果参数为 true，则加载的类将会被初始化。</p><p><strong>举例：</strong><br>　　一个含有静态代码块、静态变量、赋值给静态变量的静态方法的类：<br>　　<img src="/blogImg/2019/9/11/1-3.png" alt></p><p>测试方法：<br>　　<img src="/blogImg/2019/9/11/1-4.png" alt></p><p>运行结果：<br>　　<img src="/blogImg/2019/9/11/1-5.png" alt></p><p>　　根据运行结果得出 Class.forName 加载类是将类进了初始化，而 ClassLoader 的 loadClass 并没有对类进行初始化，只是把类加载到了虚拟机中。</p><p><strong>应用场景：</strong><br>　　在我们熟悉的 Spring 框架中的 IOC 的实现就是使用的 ClassLoader。</p><p>　　而在我们使用 JDBC 时通常是使用 Class.forName() 方法来加载数据库连接驱动。这是因为在 JDBC 规范中明确要求 Driver(数据库驱动)类必须向 DriverManager 注册自己。</p><p>　　以 MySQL 的驱动为例解释：<br>　　<img src="/blogImg/2019/9/11/1-6.png" alt></p><p>　　我们看到 Driver 注册到 DriverManager 中的操作写在了静态代码块中，这就是为什么在写 JDBC 时使用 Class.forName() 的原因了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;amp;mid=2247488216&amp;amp;idx=2&amp;amp;sn=221b30554352cc71c3eeaacd2f22a067&amp;amp;chksm=e8fe8ed1df8907c703e642a83c36f29a5b8638e544ee13d018be230543a15a6d1e450238abd5&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=&amp;amp;sharer_sharetime=1566828808925&amp;amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试题：Class.forName 和 ClassLoader 有什么区别？&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://mlone.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>如何解决分布式事务问题</title>
    <link href="https://mlone.top/2019/09/10/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98/"/>
    <id>https://mlone.top/2019/09/10/如何解决分布式事务问题/</id>
    <published>2019-09-10T14:43:40.000Z</published>
    <updated>2019-09-10T15:01:52.175Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;mid=2247488189&amp;idx=1&amp;sn=4a0408a90c45d11b6ca4e55c1cefb0ba&amp;chksm=e8fe8eb4df8907a27945cbfaa5f8dba33495cf3b2b5a5fe1c535e8b1489d594c195dc288b3db&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">面试官：你们是如何解决分布式事务问题的？</a><br><a id="more"></a></p><p><strong># 面试官心理分析</strong></p><p>　　只要聊到你做了分布式系统，必问分布式事务，你对分布式事务一无所知的话，确实会很坑，你起码得知道有哪些方案，一般怎么来做，每个方案的优缺点是什么。</p><p>　　现在面试，分布式系统成了标配，而分布式系统带来的分布式事务也成了标配了。因为你做系统肯定要用事务吧，如果是分布式系统，肯定要用分布式事务吧。先不说你搞过没有，起码你得明白有哪几种方案，每种方案可能有啥坑？比如 TCC 方案的网络问题、XA 方案的一致性问题。</p><p><strong># 面试题剖析</strong></p><p>分布式事务的实现主要有以下 5 种方案：</p><ul><li>XA 方案</li><li>TCC 方案</li><li>本地消息表</li><li>可靠消息最终一致性方案</li><li>最大努力通知方案</li></ul><h3 id="1、两阶段提交方案-XA方案"><a href="#1、两阶段提交方案-XA方案" class="headerlink" title="1、两阶段提交方案/XA方案"></a>1、两阶段提交方案/XA方案</h3><p>　　所谓的 XA 方案，即：两阶段提交，有一个事务管理器的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？如果每个数据库都回复 ok，那么就正式提交事务，在各个数据库上执行操作；如果任何其中一个数据库回答不 ok，那么就回滚事务。</p><p>　　这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。如果要玩儿，那么基于 Spring + JTA 就可以搞定，自己随便搜个 demo 看看就知道了。</p><p>　　这个方案，我们很少用，一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。我可以给大家介绍一下， 现在微服务，一个大的系统分成几十个甚至几百个服务。一般来说，我们的规定和规范，是要求每个服务只能操作自己对应的一个数据库。</p><p>　　如果你要操作别的服务对应的库，不允许直连别的服务的库，违反微服务架构的规范，你随便交叉胡乱访问，几百个服务的话，全体乱套，这样的一套服务是没法管理的，没法治理的，可能会出现数据被别人改错，自己的库被别人写挂等情况。</p><p>　　如果你要操作别人的服务的库，你必须是通过调用别的服务的接口来实现，绝对不允许交叉访问别人的数据库。<br>　　<img src="/blogImg/2019/9/10/2-1.png" alt></p><h3 id="2、TCC-方案"><a href="#2、TCC-方案" class="headerlink" title="2、TCC 方案"></a>2、TCC 方案</h3><p>　　TCC 的全称是：Try、Confirm、Cancel。　　</p><blockquote><p>Try 阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行锁定或者预留。<br>Confirm 阶段：这个阶段说的是在各个服务中执行实际的操作。<br>Cancel 阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作。（把那些执行成功的回滚）</p></blockquote><p>　　这种方案说实话几乎很少人使用，我们用的也比较少，但是也有使用的场景。因为这个事务回滚实际上是严重依赖于你自己写代码来回滚和补偿了，会造成补偿代码巨大，非常之恶心。</p><p>　　比如说我们，一般来说跟钱相关的，跟钱打交道的，支付、交易相关的场景，我们会用 TCC，严格保证分布式事务要么全部成功，要么全部自动回滚，严格保证资金的正确性，保证在资金上不会出现问题。</p><p>　　而且最好是你的各个业务执行的时间都比较短。</p><p>　　但是说实话，一般尽量别这么搞，自己手写回滚逻辑，或者是补偿逻辑，实在太恶心了，那个业务代码是很难维护的。<br>　　<img src="/blogImg/2019/9/10/2-2.png" alt></p><h3 id="3、本地消息表"><a href="#3、本地消息表" class="headerlink" title="3、本地消息表"></a>3、本地消息表</h3><p>　　本地消息表其实是国外的 ebay 搞出来的这么一套思想。</p><p>这个大概意思是这样的：</p><ol><li>A 系统在自己本地一个事务里操作同时，插入一条数据到消息表；</li><li>接着 A 系统将这个消息发送到 MQ 中去；</li><li>B 系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，那么此时这个事务会回滚，这样保证不会重复处理消息；</li><li>B 系统执行成功之后，就会更新自己本地消息表的状态以及 A 系统消息表的状态；</li><li>如果 B 系统处理失败了，那么就不会更新消息表状态，那么此时 A 系统会定时扫描自己的消息表，如果有未处理的消息，会再次发送到 MQ 中去，让 B 再次处理；</li><li>这个方案保证了最终一致性，哪怕 B 事务失败了，但是 A 会不断重发消息，直到 B 那边成功为止。</li></ol><p>　　这个方案说实话最大的问题就在于严重依赖于数据库的消息表来管理事务啥的，如果是高并发场景咋办呢？咋扩展呢？所以一般确实很少用。<br>　　<img src="/blogImg/2019/9/10/2-3.png" alt></p><h3 id="4、可靠消息最终一致性方案"><a href="#4、可靠消息最终一致性方案" class="headerlink" title="4、可靠消息最终一致性方案"></a>4、可靠消息最终一致性方案</h3><p>　　这个的意思，就是干脆不要用本地的消息表了，直接基于 MQ 来实现事务。比如阿里的 RocketMQ 就支持消息事务。</p><p>大概的意思就是：</p><ol><li>A 系统先发送一个 prepared 消息到 mq，如果这个 prepared 消息发送失败那么就直接取消操作别执行了；</li><li>如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉 mq 发送确认消息，如果失败就告诉 mq 回滚消息；</li><li>如果发送了确认消息，那么此时 B 系统会接收到确认消息，然后执行本地的事务；</li><li>mq 会自动定时轮询所有 prepared 消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认的消息，是继续重试还是回滚？一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，而确认消息却发送失败了。</li><li>这个方案里，要是系统 B 的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，比如 B 系统本地回滚后，想办法通知系统 A 也回滚；或者是发送报警由人工来手工回滚和补偿。</li><li>这个还是比较合适的，目前国内互联网公司大都是这么玩儿的，要不你举用 RocketMQ 支持的，要不你就自己基于类似 ActiveMQ？RabbitMQ？自己封装一套类似的逻辑出来，总之思路就是这样子的。</li></ol><h3 id="5、最大努力通知方案"><a href="#5、最大努力通知方案" class="headerlink" title="5、最大努力通知方案"></a>5、最大努力通知方案</h3><p>这个方案的大致意思就是：</p><ol><li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li><li>这里会有个专门消费 MQ 的最大努力通知服务，这个服务会消费 MQ 然后写入数据库中记录下来，或者是放入个内存队列也可以，接着调用系统 B 的接口；</li><li>要是系统 B 执行成功就 ok 了；要是系统 B 执行失败了，那么最大努力通知服务就定时尝试重新调用系统 B，反复 N 次，最后还是不行就放弃。</li></ol><h3 id="6、你们公司是如何处理分布式事务的？"><a href="#6、你们公司是如何处理分布式事务的？" class="headerlink" title="6、你们公司是如何处理分布式事务的？"></a>6、你们公司是如何处理分布式事务的？</h3><p>　　如果你真的被问到，可以这么说，我们某某特别严格的场景，用的是 TCC 来保证强一致性；然后其他的一些场景基于阿里的 RocketMQ 来实现分布式事务。</p><p>　　你找一个严格资金要求绝对不能错的场景，你可以说你是用的 TCC 方案；如果是一般的分布式事务场景，订单插入之后要调用库存服务更新库存，库存数据没有资金那么的敏感，可以用可靠消息最终一致性方案。</p><p>　　友情提示一下，RocketMQ 3.2.6 之前的版本，是可以按照上面的思路来的，但是之后接口做了一些改变，我这里不再赘述了。</p><p>　　当然如果你愿意，你可以参考可靠消息最终一致性方案来自己实现一套分布式事务，比如基于 RocketMQ 来玩儿。</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzIzMzgxOTQ5NA==&amp;amp;mid=2247488189&amp;amp;idx=1&amp;amp;sn=4a0408a90c45d11b6ca4e55c1cefb0ba&amp;amp;chksm=e8fe8eb4df8907a27945cbfaa5f8dba33495cf3b2b5a5fe1c535e8b1489d594c195dc288b3db&amp;amp;scene=21#wechat_redirect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试官：你们是如何解决分布式事务问题的？&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="分布式" scheme="https://mlone.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Java中long和double的原子性？</title>
    <link href="https://mlone.top/2019/09/10/Java%E4%B8%ADlong%E5%92%8Cdouble%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%9F/"/>
    <id>https://mlone.top/2019/09/10/Java中long和double的原子性？/</id>
    <published>2019-09-10T13:49:23.000Z</published>
    <updated>2019-09-10T14:24:20.853Z</updated>
    
    <content type="html"><![CDATA[<p>作者：LouisWong<br>链接：<a href="https://my.oschina.net/u/1753415/blog/724242" target="_blank" rel="noopener">https://my.oschina.net/u/1753415/blog/724242</a><br><a id="more"></a></p><ul><li>JVM中对long的操作是不是原子操作？</li><li>为什么对long的操作不是原子的？</li><li>在硬件，操作系统，JVM都是64位的情况下呢？</li></ul><blockquote><p>java中基本类型中，long和double的长度都是8个字节，32位（4字节）处理器对其读写操作无法一次完成，那么，JVM，long和double是原子性的吗？</p></blockquote><h3 id="JVM中对long的操作是不是原子操作？"><a href="#JVM中对long的操作是不是原子操作？" class="headerlink" title="JVM中对long的操作是不是原子操作？"></a>JVM中对long的操作是不是原子操作？</h3><p>　　首先，通过一段程序对long的原子性进行判断。测试程序如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongAtomTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> field = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongAtomTest</span><span class="params">(<span class="keyword">long</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; <span class="number">100000</span>) &#123;</span><br><span class="line">            LongAtomTest.field = <span class="keyword">this</span>.getValue();</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">long</span> temp = LongAtomTest.field;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="number">1L</span> &amp;&amp; temp != -<span class="number">1L</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"出现错误结果"</span> + temp);</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"运行正确"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 获取并打印当前JVM是32位还是64位的</span></span><br><span class="line">        String arch = System.getProperty(<span class="string">"sun.arch.data.model"</span>);</span><br><span class="line">        System.out.println(arch+<span class="string">"-bit"</span>);</span><br><span class="line">        LongAtomTest t1 = <span class="keyword">new</span> LongAtomTest(<span class="number">1</span>);</span><br><span class="line">        LongAtomTest t2 = <span class="keyword">new</span> LongAtomTest(-<span class="number">1</span>);</span><br><span class="line">        Thread T1 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread T2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        T1.start();</span><br><span class="line">        T2.start();</span><br><span class="line">        T1.join();</span><br><span class="line">        T2.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　可以看到，程序中有两条线程t1,t2；t1,t2各自不停的给long类型的静态变量field赋值为1，-1；t1,t2每次赋值后，会读取field的值，若field值既不是1又不是-1，就将field的值打印出来<br>　　如果对long的写入和读取操作是原子性的，那么，field的值只可能是1或者-1<br>　　运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">32-bit</span><br><span class="line">出现错误结果-4294967295</span><br><span class="line">运行正确</span><br></pre></td></tr></table></figure></p><p>　　可以看出，当线程t1,t2同时对long进行写的时候，long出现了既不是t1写入的值，又不是t2写入的值。可以推测，jvm中对long的操作并非原子操作。</p><h3 id="为什么对long的操作不是原子的？"><a href="#为什么对long的操作不是原子的？" class="headerlink" title="为什么对long的操作不是原子的？"></a>为什么对long的操作不是原子的？</h3><p>JVM内存模型中定义了8中原子操作：</p><blockquote><ol><li>lock:将一个变量标识为被一个线程独占状态</li><li>unclock:将一个变量从独占状态释放出来，释放后的变量才可以被其他线程锁定</li><li>read:将一个变量的值从主内存传输到工作内存中，以便随后的load操作</li><li>load:把read操作从主内存中得到的变量值放入工作内存的变量的副本中</li><li>use:把工作内存中的一个变量的值传给执行引擎，每当虚拟机遇到一个使用到变量的指令时都会使用该指令</li><li>assign:把一个从执行引擎接收到的值赋给工作内存中的变量，每当虚拟机遇到一个给变量赋值的指令时，都要使用该操作</li><li>store:把工作内存中的一个变量的值传递给主内存，以便随后的write操作</li><li>write:把store操作从工作内存中得到的变量的值写到主内存中的变量</li></ol></blockquote><p>　　其中，与赋值，取值相关的包括 read,load,use,assign,store,write</p><p>　　按照这个规定，long的读写都是原子操作，与我们的实践结果相反，为什会导致这种问题呢？</p><p>　　对于32位操作系统来说，单次次操作能处理的最长长度为32bit，而long类型8字节64bit，所以对long的读写都要两条指令才能完成（即每次读写64bit中的32bit）。如果JVM要保证long和double读写的原子性，势必要做额外的处理。那么，JVM有对这一情况进行额外处理吗？针对这一问题可以参考Java语言规范文档：jls-17 Non-Atomic Treatment of double and long</p><blockquote><p>For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.<br>Writes and reads of volatile long and double values are always atomic.<br>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.<br>Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency’s sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts.<br>Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications.</p></blockquote><p>从规定中我们可以知道：</p><blockquote><ol><li>对于64位的long和double，如果没有被volatile修饰，那么对其操作可以不是原子的。在操作的时候，可以分成两步，每次对32位操作。</li><li>如果使用volatile修饰long和double，那么其读写都是原子操作</li><li>对于64位的引用地址的读写，都是原子操作</li><li>在实现JVM时，可以自由选择是否把读写long和double作为原子操作</li><li>推荐JVM实现为原子操作</li></ol></blockquote><p>　　从程序得到的结果来看，32位的HotSpot没有把long和double的读写实现为原子操作。在读写的时候，分成两次操作，每次读写32位。因为采用了这种策略，所以64位的long和double的读与写都不是原子操作。</p><h3 id="在硬件，操作系统，JVM都是64位的情况下呢？"><a href="#在硬件，操作系统，JVM都是64位的情况下呢？" class="headerlink" title="在硬件，操作系统，JVM都是64位的情况下呢？"></a>在硬件，操作系统，JVM都是64位的情况下呢？</h3><p>　　对于64bit的环境来说，单次操作可以操作64bit的数据，即可以以一次性读写long或double的整个64bit。因此我们可以猜测，在64位的环境下，long和double的读写有可能是原子操作。在换了64位的JVM之后，多次运行，结果都是正确的</p><pre><code>64-bit运行正确运行正确</code></pre><p>　　结果表明，在64bit的虚拟机下，long的处理是原子性的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作者：LouisWong&lt;br&gt;链接：&lt;a href=&quot;https://my.oschina.net/u/1753415/blog/724242&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://my.oschina.net/u/1753415/blog/724242&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://mlone.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java逃逸分析</title>
    <link href="https://mlone.top/2019/09/10/Java%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90/"/>
    <id>https://mlone.top/2019/09/10/Java逃逸分析/</id>
    <published>2019-09-10T13:35:25.000Z</published>
    <updated>2019-09-10T13:47:30.317Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247489776&amp;idx=1&amp;sn=74a93cea618aec7ff5af173f9b6a0626&amp;chksm=eb539dc6dc2414d09a6277579edda97648ab42cce2da846746d7d85f65a3a250b412eb4a6d8b&amp;mpshare=1&amp;scene=1&amp;srcid=0807fFat2ZPhZVYjS60xpdPw&amp;sharer_sharetime=1565143700829&amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd" target="_blank" rel="noopener">面试问我 Java 逃逸分析，瞬间被秒杀了。。</a><br><a id="more"></a></p><blockquote><p>Java中的对象都是在堆中分配吗？说明为什么！</p></blockquote><h2 id="什么是逃逸分析？"><a href="#什么是逃逸分析？" class="headerlink" title="什么是逃逸分析？"></a>什么是逃逸分析？</h2><p>　　关于 Java 逃逸分析的定义：</p><p>　　逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><p><strong>逃逸分析的 JVM 参数如下：</strong></p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li></ul><p>　　逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数。</p><h2 id="逃逸分析算法"><a href="#逃逸分析算法" class="headerlink" title="逃逸分析算法"></a>逃逸分析算法</h2><p>　　Java Hotspot 编译器实现下面论文中描述的逃逸算法：</p><p>　　Java Hotspot 编译器实现下面论文中描述的逃逸算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Choi99] Jong-Deok Choi, Manish Gupta, Mauricio Seffano,            </span><br><span class="line">         Vugranam C. Sreedhar, Sam Midkiff,          </span><br><span class="line">         &quot;Escape Analysis for Java&quot;, Procedings of ACM SIGPLAN          </span><br><span class="line">         OOPSLA  Conference, November 1, 1999</span><br></pre></td></tr></table></figure></p><p>　　根据 Jong-Deok Choi, Manish Gupta, Mauricio Seffano,Vugranam C. Sreedhar, Sam Midkiff 等大牛在论文《<strong>Escape Analysis for Java</strong>》中描述的算法进行逃逸分析的。</p><p>　　该算法引入了连通图，用连通图来构建对象和对象引用之间的可达性关系，并在次基础上，提出一种组合数据流分析法。</p><p>　　由于算法是上下文相关和流敏感的，并且模拟了对象任意层次的嵌套关系，所以分析精度较高，只是运行时间和内存消耗相对较大。</p><h2 id="对象逃逸状态"><a href="#对象逃逸状态" class="headerlink" title="对象逃逸状态"></a>对象逃逸状态</h2><p>　　我们了解了 Java 中的逃逸分析技术，再来了解下一个对象的逃逸状态。</p><h3 id="1、全局逃逸（GlobalEscape）"><a href="#1、全局逃逸（GlobalEscape）" class="headerlink" title="1、全局逃逸（GlobalEscape）"></a>1、全局逃逸（GlobalEscape）</h3><p>　　即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：　　</p><ul><li>对象是一个静态变量</li><li>对象是一个已经发生逃逸的对象</li><li>对象作为当前方法的返回值</li></ul><h3 id="2、参数逃逸（ArgEscape）"><a href="#2、参数逃逸（ArgEscape）" class="headerlink" title="2、参数逃逸（ArgEscape）"></a>2、参数逃逸（ArgEscape）</h3><p>　　即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的。</p><h3 id="3、没有逃逸"><a href="#3、没有逃逸" class="headerlink" title="3、没有逃逸"></a>3、没有逃逸</h3><p>　　即方法中的对象没有发生逃逸。</p><h2 id="逃逸分析优化"><a href="#逃逸分析优化" class="headerlink" title="逃逸分析优化"></a>逃逸分析优化</h2><p>　　针对上面第三点，当一个对象没有逃逸时，可以得到以下几个虚拟机的优化。</p><h3 id="1-锁消除"><a href="#1-锁消除" class="headerlink" title="1) 锁消除"></a>1) 锁消除</h3><p>　　我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁。</p><p>　　例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作。</p><p><strong>锁消除的 JVM 参数如下：</strong></p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>　　锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上。</p><h3 id="2-标量替换"><a href="#2-标量替换" class="headerlink" title="2) 标量替换"></a>2) 标量替换</h3><p>　　首先要明白标量和聚合量，基础类型和对象的引用可以理解为标量，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象。</p><p>　　对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做标量替换。</p><p>　　这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能。</p><p><strong>标量替换的 JVM 参数如下：</strong></p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>　　标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上。</p><h3 id="3-栈上分配"><a href="#3-栈上分配" class="headerlink" title="3) 栈上分配"></a>3) 栈上分配</h3><p>　　当对象没有发生逃逸时，该对象就可以通过标量替换分解成成员标量分配在栈内存中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　逃逸分析讲完了，总结了不少时间，我们也应该大概知道逃逸分析是为了优化 JVM 内存和提升程序性能的。</p><p>　　我们知道这点后，在平时开发过程中就要可尽可能的控制变量的作用范围了，变量范围越小越好，让虚拟机尽可能有优化的空间。</p><p>　　简单举一个例子吧，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return sb;</span><br></pre></td></tr></table></figure></p><p>　　可以改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return sb.toString();</span><br></pre></td></tr></table></figure></p><p>　　这是一种优化案例，把 StringBuilder 变量控制在了当前方法之内，没有逃出当前方法作用域。</p><p><strong>参考资料：</strong></p><ul><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/performance-enhancements-7.html#escapeAnalysis" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/guides/vm/performance-enhancements-7.html#escapeAnalysis</a></li><li><a href="https://blog.csdn.net/rickiyeat/article/details/76802085" target="_blank" rel="noopener">https://blog.csdn.net/rickiyeat/article/details/76802085</a></li><li><a href="https://blog.csdn.net/baichoufei90/article/details/85180478" target="_blank" rel="noopener">https://blog.csdn.net/baichoufei90/article/details/85180478</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;amp;mid=2247489776&amp;amp;idx=1&amp;amp;sn=74a93cea618aec7ff5af173f9b6a0626&amp;amp;chksm=eb539dc6dc2414d09a6277579edda97648ab42cce2da846746d7d85f65a3a250b412eb4a6d8b&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0807fFat2ZPhZVYjS60xpdPw&amp;amp;sharer_sharetime=1565143700829&amp;amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;面试问我 Java 逃逸分析，瞬间被秒杀了。。&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://mlone.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>什么是重入锁</title>
    <link href="https://mlone.top/2019/09/10/%E4%BB%80%E4%B9%88%E6%98%AF%E9%87%8D%E5%85%A5%E9%94%81/"/>
    <id>https://mlone.top/2019/09/10/什么是重入锁/</id>
    <published>2019-09-10T13:00:22.000Z</published>
    <updated>2019-09-10T14:28:11.395Z</updated>
    
    <content type="html"><![CDATA[<p>转自：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247489881&amp;idx=1&amp;sn=fd30734494272ec71ea9d77e2a2d2b00&amp;chksm=eb539c6fdc241579e420b8a44eca80c50599cf3b11490e240781db064478681bf7b0ea03275f&amp;mpshare=1&amp;scene=1&amp;srcid=08070ZxRSbrvgs6UPJgpCTAe&amp;sharer_sharetime=1565143685590&amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd" target="_blank" rel="noopener">到底什么是重入锁，拜托，一次搞清楚！</a><br><a id="more"></a></p><h2 id="什么是重入锁"><a href="#什么是重入锁" class="headerlink" title="什么是重入锁"></a>什么是重入锁</h2><blockquote><p>java.util.concurrent.locks.ReentrantLock</p></blockquote><p>　　这个是 JDK @since 1.5 添加的一种颗粒度更小的锁，它完全可以替代 synchronized 关键字来实现它的所有功能，而且 ReentrantLock 锁的灵活度要远远大于 synchronized 关键字。<br>　　<img src="/blogImg/2019/9/10/1-1.png" alt><br>　　从类结构图看出，ReentrantLock 实现了 Lock 接口，ReentrantLock 只是 Lock 接口的一个实现而已。</p><blockquote><p>java.util.concurrent.locks.Lock</p></blockquote><p>　　它们都是 java.util.concurrent 包里面的内容（俗称 JUC、并发包），也都是 JDK 1.5 开始加入的。</p><h2 id="为什么叫重入锁呢？"><a href="#为什么叫重入锁呢？" class="headerlink" title="为什么叫重入锁呢？"></a>为什么叫重入锁呢？</h2><p>　　ReentrantLock，我们把它拆开来看就明了了。<br>　　Re-Entrant-Lock：即表示可重新反复进入的锁，但仅限于当前线程；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock()</span><br><span class="line">      lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　如示例代码所示，当前线程可以反复加锁，但也需要释放同样加锁次数的锁，即重入了多少次，就要释放多少次，不然也会导入锁不被释放。</p><p>　　试想一下，如果不设计成可重入锁，那自己如果反复给自己加锁，不是会把自己加死锁了吗？所以，到现在，重入锁的概念大概应该清楚了吧？</p><h2 id="重入锁最重要的几个方法"><a href="#重入锁最重要的几个方法" class="headerlink" title="重入锁最重要的几个方法"></a>重入锁最重要的几个方法</h2><p>这几个方法都是 Lock 接口中定义的：</p><p><strong>1）lock()</strong></p><p>获取锁，有以下三种情况：</p><ul><li>锁空闲：直接获取锁并返回，同时设置锁持有者数量为：1；</li><li>当前线程持有锁：直接获取锁并返回，同时锁持有者数量递增1；</li><li>其他线程持有锁：当前线程会休眠等待，直至获取锁为止；</li></ul><p><strong>2）lockInterruptibly()</strong></p><p>　　获取锁，逻辑和 lock() 方法一样，但这个方法在获取锁过程中能响应中断。</p><p><strong>3）tryLock()</strong></p><p>　　从关键字字面理解，这是在尝试获取锁，获取成功返回：true，获取失败返回：false, 这个方法不会等待，有以下三种情况：</p><ul><li>锁空闲：直接获取锁并返回：true，同时设置锁持有者数量为：1；</li><li>当前线程持有锁：直接获取锁并返回：true，同时锁持有者数量递增1；</li><li>其他线程持有锁：获取锁失败，返回：false；</li></ul><p><strong>4）tryLock(long timeout, TimeUnit unit)</strong></p><p>　　逻辑和 tryLock() 差不多，只是这个方法是带时间的。</p><p><strong>5）unlock()</strong></p><p>　　释放锁，每次锁持有者数量递减 1，直到 0 为止。所以，现在知道为什么 lock 多少次，就要对应 unlock 多少次了吧。</p><p><strong>6）newCondition</strong></p><p>　　返回一个这个锁的 Condition 实例，可以实现 synchronized 关键字类似 wait/ notify 实现多线程通信的功能，不过这个比 wait/ notify 要更灵活，更强大！</p><h2 id="重入锁大概的用法"><a href="#重入锁大概的用法" class="headerlink" title="重入锁大概的用法"></a>重入锁大概的用法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();  <span class="comment">// block until condition holds</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>　　看见没有，加锁和释放锁都在方法里面进行，可以自由控制，比 synchronized 更灵活，更方便。但要注意的是，释放锁操作必须在 finally 里面，不然如果出现异常导致锁不能被正常释放，进而会卡死后续所有访问该锁的线程。　　</p><h2 id="synchronized-是重入锁吗？"><a href="#synchronized-是重入锁吗？" class="headerlink" title="synchronized 是重入锁吗？"></a>synchronized 是重入锁吗？</h2><p>　　那么问题来了，synchronized 是重入锁吗？</p><p>　　你可能会说不是，因为 ReentrantLock 既然是重入锁，根据推理，相反，那 synchronized 肯定就不是重入锁，那你就错了。</p><p>　　答案是：yes，为什么？看下面的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　operation 方法调用了 add 方法，两个方法都是用 synchronized 修饰的，add()  方法可以成功获取当前线程 operation() 方法已经获取到的锁，说明 synchronized 就是可重入锁。</p><p>　　面试常问的Synchronized的几种用法推荐看下这篇文章：<a href="https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;mid=2247487913&amp;idx=2&amp;sn=318f4cbbde0669bd8c62af3501d2c915&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Synchronized 有几种用法？</a>。</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转自：&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3ODcxMzQzMw==&amp;amp;mid=2247489881&amp;amp;idx=1&amp;amp;sn=fd30734494272ec71ea9d77e2a2d2b00&amp;amp;chksm=eb539c6fdc241579e420b8a44eca80c50599cf3b11490e240781db064478681bf7b0ea03275f&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=08070ZxRSbrvgs6UPJgpCTAe&amp;amp;sharer_sharetime=1565143685590&amp;amp;sharer_shareid=b7684e8d9c73854311a908ce0138e103#rd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;到底什么是重入锁，拜托，一次搞清楚！&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://mlone.top/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>md文档基础语法</title>
    <link href="https://mlone.top/2019/09/05/md%E6%96%87%E6%A1%A3%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>https://mlone.top/2019/09/05/md文档基础语法/</id>
    <published>2019-09-05T13:25:48.000Z</published>
    <updated>2019-09-10T14:11:52.515Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>转自：<a href="https://www.cnblogs.com/liugang-vip/p/6337580.html" target="_blank" rel="noopener">https://www.cnblogs.com/liugang-vip/p/6337580.html</a></p><br><a id="more"></a><p></p><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><p>　　<img src="/blogImg/2019/9/5/1-1.png" alt><br>　　<img src="/blogImg/2019/9/5/1-2.png" alt><br>　　前面带#号，后面带文字，分别表示h1-h6,上图可以看出，只到h6，而且h1下面会有一条横线，注意，#号后面有空格。</p><h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><p>　　无序列表可以使用*，+，- 来创建：<br>　　<img src="/blogImg/2019/9/5/1-3.png" alt><br>　　<img src="/blogImg/2019/9/5/1-4.png" alt><br>　　有序列表使用：数字+英文的点，特别注意，有序列表的序号是根据第一行列表的数字顺序来的：<br>　　<img src="/blogImg/2019/9/5/1-5.png" alt><br>　　<img src="/blogImg/2019/9/5/1-6.png" alt></p><h1 id="3-区块引用"><a href="#3-区块引用" class="headerlink" title="3. 区块引用"></a>3. 区块引用</h1><p>　　<img src="/blogImg/2019/9/5/1-7.png" alt><br>　　<img src="/blogImg/2019/9/5/1-8.png" alt><br>　　无序列表下方的便是引用，用法就是在语句前面加一个 &gt; ，注意是英文的那个右尖括号，注意空格。因为引用是一个区块，所以理论上应该什么内容都可以放，比如说：标题，列表，引用等等。</p><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4. 分割线"></a>4. 分割线</h1><p>　　分割线可以由* - _（星号，减号，底线）这3个符号的至少3个符号表示，且不需要连续，有空格也可以：<br>　　<img src="/blogImg/2019/9/5/1-9.png" alt><br>　　<img src="/blogImg/2019/9/5/1-10.png" alt></p><h1 id="5-链接"><a href="#5-链接" class="headerlink" title="5. 链接"></a>5. 链接</h1><p>　　行内式：<br>　　<img src="/blogImg/2019/9/5/1-11.png" alt><br>　　<img src="/blogImg/2019/9/5/1-12.png" alt><br>　　参数式：<br>　　<img src="/blogImg/2019/9/5/1-13.png" alt><br>　　<img src="/blogImg/2019/9/5/1-14.png" alt></p><h1 id="6-图片"><a href="#6-图片" class="headerlink" title="6. 图片"></a>6. 图片</h1><p>　　图片也有2种方式：行内式和参数式，用法跟链接的基本一样，唯一的不同就是，图片前面要写一个！<br>　　<img src="/blogImg/2019/9/5/1-15.png" alt><br>　　<img src="/blogImg/2019/9/5/1-16.png" alt></p><h1 id="7-代码框"><a href="#7-代码框" class="headerlink" title="7. 代码框"></a>7. 代码框</h1><p>　　如果只有单行的话，可以用单反引号包起来：<br>　　<img src="/blogImg/2019/9/5/1-17.png" alt><br>　　<img src="/blogImg/2019/9/5/1-18.png" alt><br>　　多行用三个反引号，如果要写注释，可以在反引号后面写：<br>　　<img src="/blogImg/2019/9/5/1-19.png" alt><br>　　<img src="/blogImg/2019/9/5/1-20.png" alt>　</p><h1 id="8-表格"><a href="#8-表格" class="headerlink" title="8. 表格"></a>8. 表格</h1><p>　　<img src="/blogImg/2019/9/5/1-21.png" alt><br>　　<img src="/blogImg/2019/9/5/1-22.png" alt><br>　　从这3种不同写法看，表格的格式不一定要对的非常起，但是为了好看，对齐肯定是最好的，第一种的分割线后面的冒号表示对齐方式，写在左边表示左对齐，右边为右对齐，两边都写表示居中，还是有点意思的，不过现实出来的结果是，表格外面并没有线框包起来，不知道别人的怎么弄的。</p><h1 id="9-强调"><a href="#9-强调" class="headerlink" title="9. 强调"></a>9. 强调</h1><p>　　一个星号或者是一个下划线包起来，会转换为<em>倾斜，如果是2个，会转换为<strong>加粗：<br>　　<img src="/blogImg/2019/9/5/1-23.png" alt><br>　　<img src="/blogImg/2019/9/5/1-24.png" alt></strong></em></p><h1 id="10-转义"><a href="#10-转义" class="headerlink" title="10. 转义"></a>10. 转义</h1><p>　　就不一一列举了，基本上跟js转义是一样的：<br>　　<img src="/blogImg/2019/9/5/1-25.png" alt><br>　　<img src="/blogImg/2019/9/5/1-26.png" alt></p><h1 id="11-删除线"><a href="#11-删除线" class="headerlink" title="11. 删除线"></a>11. 删除线</h1><p>　　<img src="/blogImg/2019/9/5/1-27.png" alt><br>　　<img src="/blogImg/2019/9/5/1-28.png" alt></p><p><strong>参考文献：</strong><br>　　<a href="http://www.appinn.com/markdown/" target="_blank" rel="noopener">http://www.appinn.com/markdown/</a><br>　　<a href="http://sspai.com/25137" target="_blank" rel="noopener">http://sspai.com/25137</a>　　　　　　</p><p>　　</p><p>　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;转自：&lt;a href=&quot;https://www.cnblogs.com/liugang-vip/p/6337580.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/liugang-vip/p/6337580.html&lt;/a&gt;&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>他们-李志</title>
    <link href="https://mlone.top/2019/08/26/%E4%BB%96%E4%BB%AC-%E6%9D%8E%E5%BF%97/"/>
    <id>https://mlone.top/2019/08/26/他们-李志/</id>
    <published>2019-08-26T15:40:53.000Z</published>
    <updated>2019-08-26T15:45:41.765Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>歌曲：《他们》   作者：李志</p><br><a id="more"></a><p></p><p>　　有人在哭泣，有人在歌唱，有人生来有钱包<br>　　有人在奋斗，有人在幻想，有人一生没吃饱<br>　　<br>　　他们指向左，他们指向右，他们买了壮阳药<br>　　我们不能说，我们不能做，我们的生活多美好<br>　　<br>　　啦啦啦啦啦啦，啦啦啦啦啦啦<br>　　啦啦啦啦啦啦，我们的生活多美好<br>　　<br>　　铁路向西走，长江不能流，到底谁才是走狗<br>　　天亮漱漱口，天黑动动手，劳动为了给税收<br>　　他们指向左，他们指向右，他们一直有洋楼<br>　　我们没有闹，我们不能叫，我们的生活带套套<br>　　<br>　　啦啦啦啦啦啦，啦啦啦啦啦啦<br>　　啦啦啦啦啦啦，我们的生活多美好<br>　　<br>　　爸爸喜欢嫖，妈妈就会吵，上学还要请家教<br>　　爷爷睡不著，奶奶看不到，白衣天使真是好<br>　　他们指向左，他们指向右，总是有狗跟著跑<br>　　我们没有闹，我们没上吊，这样还不算厚道？<br>　　<br>　　啦啦啦啦啦啦，啦啦啦啦啦啦<br>　　啦啦啦啦啦啦，怎样才算是厚道<br>　　<br>　　无极是无耻，春晚是婊子，疯狂的石头有意思<br>　　孙逸仙同志，毛润之博士，阿扁闲著没吊事<br>　　他们指向左，他们指向右，你我不能没脑子<br>　　闭眼随便过，睁眼将就活，我们的生活多美好<br>　　<br>　　啦啦啦啦啦啦，啦啦啦啦啦啦<br>　　啦啦啦啦啦啦，我们的生活多美好<br>　　<br>　　啦啦啦啦啦啦，啦啦啦啦啦啦<br>　　啦啦啦啦啦啦，我们的生活多美好</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;歌曲：《他们》   作者：李志&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>少年歌行</title>
    <link href="https://mlone.top/2019/08/26/%E5%B0%91%E5%B9%B4%E6%AD%8C%E8%A1%8C/"/>
    <id>https://mlone.top/2019/08/26/少年歌行/</id>
    <published>2019-08-26T15:22:10.000Z</published>
    <updated>2019-08-26T15:44:17.192Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>动漫：《少年歌行》    作者：无心（叶世安）</p><br><a id="more"></a><p></p><p>　　我欲乘风向北行，雪落轩辕大如席。<br>　　<br>　　我欲借船向东游，绰约仙子迎风立。<br>　　<br>　　我欲踏云千万里，庙堂龙吟奈我何？<br>　　<br>　　昆仑之巅沐日光，沧海绝境见青山。<br>　　<br>　　长风万里燕归来，不见天涯人不回！</p><p>　　<img src="/blogImg/7/1.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;动漫：《少年歌行》    作者：无心（叶世安）&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>湖心亭看雪</title>
    <link href="https://mlone.top/2019/08/06/%E6%B9%96%E5%BF%83%E4%BA%AD%E7%9C%8B%E9%9B%AA/"/>
    <id>https://mlone.top/2019/08/06/湖心亭看雪/</id>
    <published>2019-08-05T16:50:31.000Z</published>
    <updated>2019-09-05T14:49:38.584Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】张岱  【朝代】明</p><br><a id="more"></a><p></p><p>　　崇祯五年十二月，余住西湖。大雪三日，湖中人鸟声俱绝。是日更定矣，余拏一小舟，拥毳衣炉火，独往湖心亭看雪。雾凇沆砀，天与云与山与水，上下一白。湖上影子，惟长堤一痕、湖心亭一点、与余舟一芥、舟中人两三粒而已。</p><p>　　到亭上，有两人铺毡对坐，一童子烧酒炉正沸。见余大喜曰：“湖中焉得更有此人！”拉余同饮。余强饮三大白而别。问其姓氏，是金陵人，客此。及下船，舟子喃喃曰：“莫说相公痴，更有痴似相公者。”<br>　　<img src="/blogImg/6/6.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】张岱  【朝代】明&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>《长干行-君家何处住》</title>
    <link href="https://mlone.top/2019/08/06/%E3%80%8A%E9%95%BF%E5%B9%B2%E8%A1%8C-%E5%90%9B%E5%AE%B6%E4%BD%95%E5%A4%84%E4%BD%8F%E3%80%8B/"/>
    <id>https://mlone.top/2019/08/06/《长干行-君家何处住》/</id>
    <published>2019-08-05T16:38:37.000Z</published>
    <updated>2019-08-05T16:45:30.342Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】崔颢   【朝代】唐</p><br><a id="more"></a><br>　　<br>　　<img src="/blogImg/6/5.jpg" alt>　　<p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】崔颢   【朝代】唐&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>记一首打油诗</title>
    <link href="https://mlone.top/2019/08/06/%E8%AE%B0%E4%B8%80%E9%A6%96%E6%89%93%E6%B2%B9%E8%AF%97-%E3%80%8A%E9%AB%98%E4%B8%AD%E7%89%A9%E7%90%86%E9%80%89%E4%BF%AE3-1%E3%80%8B/"/>
    <id>https://mlone.top/2019/08/06/记一首打油诗-《高中物理选修3-1》/</id>
    <published>2019-08-05T16:36:47.000Z</published>
    <updated>2019-08-20T15:11:47.015Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>取自–《高中物理选修3-1》</p><br><a id="more"></a><br>　　<br>　　<img src="/blogImg/6/1.jpg" alt><br>　　<br>　　<img src="/blogImg/6/2.jpg" alt><br>　　　　<br>　　<img src="/blogImg/6/3.jpg" alt><br>　　<br>　　<br>　　昔日曾看此湖图，<br>　　不信人间有此湖。<br>　　今日打从此湖过，<br>　　画工还欠费功夫。<br>　　<br>　　<img src="/blogImg/6/4.jpg" alt><p></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;取自–《高中物理选修3-1》&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>社戏</title>
    <link href="https://mlone.top/2019/08/06/%E7%A4%BE%E6%88%8F/"/>
    <id>https://mlone.top/2019/08/06/社戏/</id>
    <published>2019-08-05T16:18:15.000Z</published>
    <updated>2019-09-05T14:54:05.495Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】鲁迅   【年代】1922</p><br><a id="more"></a><p></p><p>　　我在倒数上去的二十年中，只看过两回中国戏，前十年是绝不看，因为没有看戏的意思和机会，那两回全在后十年，然而都没有看出什么来就走了。<br>　　<br>　　第一回是民国元年我初到北京的时候，当时一个朋友对我说，北京戏最好，你不去见见世面么？我想，看戏是有味的，而况在北京呢。于是都兴致勃勃地跑到什么园，戏文已经开场了，在外面也早听到冬冬地响。我们挨进门，几个红的绿的在我的眼前一闪烁，便又看见戏台下满是许多头，再定神四面看，却见中间也还有几个空座，挤过去要坐时，又有人对我发议论，我因为耳朵已经喤喤的响着了，用了心，才听到他是说“有人，不行！”<br>　　<br>　　我们退到后面，一个辫子很光的却来领我们到了侧面，指出一个地位来。这所谓地位者，原来是一条长凳，然而他那坐板比我的上腿要狭到四分之三，他的脚比我的下腿要长过三分之二。我先是没有爬上去的勇气，接着便联想到私刑拷打的刑具，不由的毛骨悚然地走出了。<br>　　<br>　　走了许多路，忽听得我的朋友的声音道，“究竟怎的？”我回过脸去，原来他也被我带出来了。他很诧异地说，“怎么总是走，不答应？”我说，“朋友，对不起，我耳朵只在冬冬喤喤的响，并没有听到你的话。”<br>　　<br>　　后来我每一想到，便很以为奇怪，似乎这戏太不好，——否则便是我近来在戏台下不适于生存了。<br>　　<br>　　第二回忘记了那一年，总之是募集湖北水灾捐而谭叫天（注：即京剧名角谭志道）还没有死。捐法是两元钱买一张戏票，可以到第一舞台去看戏，扮演的多是名角，其一就是小叫天。我买了一张票，本是对于劝募人聊以塞责的，然而似乎又有好事家乘机对我说了些叫天不可不看的大法要了。我于是忘了前几年的冬冬喤喤之灾，竟到第一舞台去了，但大约一半也因为重价购来的宝票，总得使用了才舒服。我打听得叫天出台是迟的，而第一舞台却是新式构造，用不着争座位，便放了心，延宕到九点钟才去，谁料照例，人都满了，连立足也难，我只得挤在远处的人丛中看一个老旦在台上唱。那老旦嘴边插着两个点火的纸捻子，旁边有一个鬼卒，我费尽思量，才疑心他或者是目连的母亲，因为后来又出来了一个和尚。然而我又不知道那名角是谁，就去问挤小在我的左边的一位胖绅士。他很看不起似的斜瞥了我一眼，说道，“龚云甫！”我深愧浅陋而且粗疏，脸上一热，同时脑里也制出了决不再问的定章，于是看小旦唱，看花旦唱，看老生唱，看不知什么角色唱，看一大班人乱打，看两三个人互打，从九点多到十点，从十点到十一点，从十一点到十一点半，从十一点半到十二点，——然而叫天竟还没有来。<br>　　<br>　　我向来没有这样忍耐的等待过什么事物，而况这身边的胖绅士的吁吁的喘气，这台上的冬冬喤喤的敲打，红红绿绿的晃荡，加之以十二点，忽而使我醒悟到在这里不适于生存了。我同时便机械的拧转身子，用力往外只一挤，觉得背后便已满满的，大约那弹性的胖绅士早在我的空处胖开了他的右半身了。我后无回路，自然挤而又挤，终于出了大门。街上除了专等看客的车辆之外，几乎没有什么行人了，大门口却还有十几个人昂着头看戏目，别有一堆人站着并不看什么，我想：他们大概是看散戏之后出来的女人们的，而叫天却还没有来……<br>　　<br>　　然而夜气很清爽，真所谓“沁人心脾”，我在北京遇着这样的好空气，仿佛这是第一遭了。<br>　　<br>　　这一夜，就是我对于中国戏告了别的一夜，此后再没有想到他，即使偶尔经过戏园，我们也漠不相关，精神上早已一在天之南一在地之北了。<br>　　<br>　　但是前几天，我忽在无意之中看到一本日本文的书，可惜忘记了书名和著者，总之是关于中国戏的。其中有一篇，大意仿佛说，中国戏是大敲，大叫，大跳，使看客头昏脑眩，很不适于剧场，但若在野外散漫的所在，远远的看起来，也自有他的风致。我当时觉着这正是说了在我意中而未曾想到的话，因为我确记得在野外看过很好的戏，到北京以后的连进两回戏园去，也许还是受了那时的影响哩。可惜我不知道怎么一来，竟将书名忘却了。<br>　　<br>　　至于我看好戏的时候，却实在已经是“远哉遥遥”的了，其时恐怕我还不过十一二岁。<br>　　<br>　　我们鲁镇的习惯，本来是凡有出嫁的女儿，倘自己还未当家，夏间便大抵回到母家去消夏。那时我的祖母虽然还康健，但母亲也已分担了些家务，所以夏期便不能多日的归省了，只得在扫墓完毕之后，抽空去住几天，这时我便每年跟了我的母亲住在外祖母的家里。那地方叫平桥村，是一个离海边不远，极偏僻的，临河的小村庄；住户不满三十家，都种田，打鱼，只有一家很小的杂货店。但在我是乐土：因为我在这里不但得到优待，又可以免念“秩秩斯干幽幽南山”了。<br>　　<br>　　和我一同玩的是许多小朋友，因为有了远客，他们也都从父母那里得了减少工作的许可，伴我来游戏。在小村里，一家的客，几乎也就是公共的。我们年纪都相仿，但论起行辈来，却至少是叔子，有几个还是太公，因为他们合村都同姓，是本家。然而我们是朋友，即使偶尔吵闹起来，打了太公，一村的老老少少，也决没有一个会想出“犯上”这两个字来，而他们也百分之九十九不识字。<br>　　<br>　　我们每天的事情大概是掘蚯蚓，掘来穿在铜丝做的小钩上，伏在河沿上去钓虾。虾是水世界里的呆子，决不惮用了自己的两个钳捧着钩尖送到嘴里去的，所以不半天便可以钓到一大碗。这虾照例是归我吃的。其次便是一同去放牛，但或者因为高等动物了的缘故罢，黄牛水牛都欺生，敢于欺侮我，因此我也总不敢走近身，只好远远地跟着，站着。这时候，小朋友们便不再原谅我会读“秩秩斯干”，却全都嘲笑起来了。<br>　　<br>　　至于我在那里所第一盼望的，却在到赵庄去看戏。赵庄是离平桥村五里的较大的村庄；平桥村太小，自己演不起戏，每年总付给赵庄多少钱，算作合做的。当时我并不想到他们为什么年年要演戏。现在想，那或者是春赛，是社戏了。<br>　　<br>　　就在我十一二岁时候的这一年，这日期也看看等到了。不料这一年真可惜，在早上就叫不到船。平桥村只有一只早出晚归的航船是大船，决没有留用的道理。其余的都是小船，不合用；央人到邻村去问，也没有，早都给别人定下了。外祖母很气恼，怪家里的人不早定，絮叨起来。母亲便宽慰伊，说我们鲁镇的戏比小村里的好得多，一年看几回，今天就算了。只有我急得要哭，母亲却竭力的嘱咐我，说万不能装模装样，怕又招外祖母生气，又不准和别人一同去，说是怕外祖母要担心。<br>　　<br>　　总之，是完了。到下午，我的朋友都去了，戏已经开场了，我似乎听到锣鼓的声音，而且知道他们在戏台下买豆浆喝。<br>　　<br>　　这一天我不钓虾，东西也少吃。母亲很为难，没有法子想。到晚饭时候，外祖母也终于觉察了，并且说我应当不高兴，他们太怠慢，是待客的礼数里从来没有的。吃饭之后，看过戏的少年们也都聚拢来了，高高兴兴的来讲戏。只有我不开口；他们都叹息而且表同情。忽然间，一个最聪明的双喜大悟似的提议了，他说，“大船？八叔的航船不是回来了么？”十几个别的少年也大悟，立刻撺掇起来，说可以坐了这航船和我一同去。我高兴了。然而外祖母又怕都是孩子，不可靠；母亲又说是若叫大人一同去，他们白天全有工作，要他熬夜，是不合情理的。在这迟疑之中，双喜可又看出底细来了，便又大声的说道，“我写包票！船又大；迅哥儿向来不乱跑；我们又都是识水性的！”<br>　　<br>　　诚然！这十多个少年，委实没有一个不会凫水的，而且两三个还是弄潮的好手。<br>　　<br>　　外祖母和母亲也相信，便不再驳回，都微笑了。我们立刻一哄的出了门。<br>　　<br>　　我的很重的心忽而轻松了，身体也似乎舒展到说不出的大。一出门，便望见月下的平桥内泊着一只白篷的航船，大家跳下船，双喜拔前篙，阿发拔后篙，年幼的都陪我坐在舱中，较大的聚在船尾。母亲送出来吩咐“要小心”的时候，我们已经点开船，在桥石上一磕，退后几尺，即又上前出了桥。于是架起两支橹，一支两人，一里一换，有说笑的，有嚷的，夹着潺潺的船头激水的声音，在左右都是碧绿的豆麦田地的河流中，飞一般径向赵庄前进了。<br>　　<br>　　两岸的豆麦和河底的水草所发散出来的清香，夹杂在水气中扑面的吹来；月色便朦胧在这水气里。淡黑的起伏的连山，仿佛是踊跃的铁的兽脊似的，都远远的向船尾跑去了，但我却还以为船慢。他们换了四回手，渐望见依稀的赵庄，而且似乎听到歌吹了，还有几点火，料想便是戏台，但或者也许是渔火。<br>　　<br>　　那声音大概是横笛，宛转，悠扬，使我的心也沉静，然而又自失起来，觉得要和他弥散在含着豆麦蕴藻之香的夜气里。<br>　　<br>　　那火接近了，果然是渔火；我才记得先前望见的也不是赵庄。那是正对船头的一丛松柏林，我去年也曾经去游玩过，还看见破的石马倒在地下，一个石羊蹲在草里呢。过了那林，船便弯进了叉港，于是赵庄便真在眼前了。<br>　　<br>　　最惹眼的是屹立在庄外临河的空地上的一座戏台，模糊在远处的月夜中，和空间几乎分不出界限，我疑心画上见过的仙境，就在这里出现了。这时船走得更快，不多时，在台上显出人物来，红红绿绿的动，近台的河里一望乌黑的是看戏的人家的船篷。<br>　　<br>　　“近台没有什么空了，我们远远的看罢。”阿发说。<br>　　<br>　　这时船慢了，不久就到，果然近不得台旁，大家只能下了篙，比那正对戏台的神棚还要远。其实我们这白篷的航船，本也不愿意和乌篷的船在一处，而况并没有空地呢……<br>　　<br>　　在停船的匆忙中，看见台上有一个黑的长胡子的背上插着四张旗，捏着长枪，和一群赤膊的人正打仗。双喜说，那就是有名的铁头老生，能连翻八十四个筋斗，他日里亲自数过的。<br>　　<br>　　我们便都挤在船头上看打仗，但那铁头老生却又并不翻筋斗，只有几个赤膊的人翻，翻了一阵，都进去了，接着走出一个小旦来，咿咿呀呀的唱。双喜说，“晚上看客少，铁头老生也懈了，谁肯显本领给白地看呢？”我相信这话对，因为其时台下已经不很有人，乡下人为了明天的工作，熬不得夜，早都睡觉去了，疏疏朗朗的站着的不过是几十个本村和邻村的闲汉。乌篷船里的那些土财主的家眷固然在，然而他们也不在乎看戏，多半是专到戏台下来吃糕饼、水果和瓜子的。所以简直可以算白地。<br>　　<br>　　然而我的意思却也并不在乎看翻筋斗。我最愿意看的是一个人蒙了白布，两手在头上捧着一支棒似的蛇头的蛇精，其次是套了黄布衣跳老虎。但是等了许多时都不见，小旦虽然进去了，立刻又出来了一个很老的小生。我有些疲倦了，托桂生买豆浆去。他去了一刻，回来说：“没有。卖豆浆的聋子也回去了。日里倒有，我还喝了两碗呢。现在去舀一瓢水来给你喝罢。”<br>　　<br>　　我不喝水，支撑着仍然看，也说不出见了些什么，只觉得戏子的脸都渐渐的有些稀奇了，那五官渐不明显，似乎融成一片的再没有什么高低。年纪小的几个多打呵欠了，大的也各管自己谈话。忽而一个红衫的小丑被绑在台柱子上，给一个花白胡子的用马鞭打起来了，大家才又振作精神的笑着看。在这一夜里，我以为这实在要算是最好的一折。<br>　　<br>　　然而老旦终于出台了。老旦本来是我所最怕的东西，尤其是怕他坐下了唱。这时候，看见大家也都很扫兴，才知道他们的意见是和我一致的。那老旦当初还只是踱来踱去的唱，后来竟在中间的一把交椅上坐下了。我很担心；双喜他们却就破口喃喃的骂。我忍耐的等着，许多工夫，只见那老旦将手一抬，我以为就要站起来了，不料他却又慢慢的放下在原地方，仍旧唱。全船里几个人不住的吁气，其余的也打起哈欠来。双喜终于熬不住了，说道，怕他会唱到天明还不完，还是我们走的好罢。大家立刻都赞成，和开船时候一样踊跃，三四人径奔船尾，拔了篙，点退几丈，回转船头，驾起橹，骂着老旦，又向那松柏林前进了。<br>　　<br>　　月还没有落，仿佛看戏也并不很久似的，而一离赵庄，月光又显得格外的皎洁。回望戏台在灯火光中，却又如初来未到时候一般，又漂渺得像一座仙山楼阁，满被红霞罩着了。吹到耳边来的又是横笛，很悠扬；我疑心老旦已经进去了，但也不好意思说再回去看。<br>　　<br>　　不多久，松柏林早在船后了，船行也并不慢，但周围的黑暗只是浓，可知已经到了深夜。他们一面议论着戏子，或骂，或笑，一面加紧的摇船。这一次船头的激水声更其响亮了，那航船，就像一条大白鱼背着一群孩子在浪花里蹿，连夜渔的几个老渔父，也停了艇子看着喝彩起来。<br>　　<br>　　离平桥村还有一里模样，船行却慢了，摇船的都说很疲乏，因为太用力，而且许久没有东西吃。这回想出来的是桂生，说是罗汉豆正旺相，柴火又现成，我们可以偷一点来煮吃。大家都赞成，立刻近岸停了船；岸上的田里，乌油油的都是结实的罗汉豆。<br>　　<br>　　“阿阿，阿发，这边是你家的，这边是老六一家的，我们偷那一边的呢？”双喜先跳下去了，在岸上说。<br>　　<br>　　我们也都跳上岸。阿发一面跳，一面说道，“且慢，让我来看一看罢，”他于是往来的摸了一回，直起身来说道，“偷我们的罢，我们的大得多呢。”一声答应，大家便散开在阿发家的豆田里，各摘了一大捧，抛入船舱中。双喜以为再多偷，倘给阿发的娘知道是要哭骂的，于是各人便到六一公公的田里又各偷了一大捧。<br>　　<br>　　我们中间几个年长的仍然慢慢的摇着船，几个到后舱去生火，年幼的和我都剥豆。不久豆熟了，便任凭航船浮在水面上，都围起来用手撮着吃。吃完豆，又开船，一面洗器具，豆荚豆壳全抛在河水里，什么痕迹也没有了。双喜所虑的是用了八公公船上的盐和柴，这老头子很细心，一定要知道，会骂的。然而大家议论之后，归结是不怕。他如果骂，我们便要他归还去年在岸边拾去的一枝枯桕树，而且当面叫他“八癞子”。<br>　　<br>　　“都回来了！那里会错。我原说过写包票的！”双喜在船头上忽而大声的说。<br>　　<br>　　我向船头一望，前面已经是平桥。桥脚上站着一个人，却是我的母亲，双喜便是对伊说着话。我走出前舱去，船也就进了平桥了，停了船，我们纷纷都上岸。母亲颇有些生气，说是过了三更了，怎么回来得这样迟，但也就高兴了，笑着邀大家去吃炒米。<br>　　<br>　　大家都说已经吃了点心，又渴睡，不如及早睡的好，各自回去了。<br>　　<br>　　第二天，我向午才起来，并没有听到什么关系八公公盐柴事件的纠葛，下午仍然去钓虾。<br>　　<br>　　双喜，你们这班小鬼，昨天偷了我的豆了罢？又不肯好好的摘，踏坏了不少。”我抬头看时，是六一公公棹着小船，卖了豆回来了，船肚里还有剩下的一堆豆。<br>　　<br>　　“是的。我们请客。我们当初还不要你的呢。你看，你把我的虾吓跑了！”双喜说。<br>　　<br>　　六一公公看见我，便停了楫，笑道，“请客？——这是应该的。”于是对我说，“迅哥儿，昨天的戏可好么？”<br>　　<br>　　我点一点头，说道，“好。”<br>　　<br>　　“豆可中吃呢？”<br>　　<br>　　我又点一点头，说道，“很好。”<br>　　<br>　　不料六一公公竟非常感激起来，将大拇指一翘，得意的说道，“这真是大市镇里出来的读过书的人才识货！我的豆种是粒粒挑选过的，乡下人不识好歹，还说我的豆比不上别人的呢。我今天也要送些给我们的姑奶奶尝尝去……”他于是打着楫子过去了。<br>　　<br>　　待到母亲叫我回去吃晚饭的时候，桌上便有一大碗煮熟了的罗汉豆，就是六一公公送给母亲和我吃的。听说他还对母亲极口夸奖我，说“小小年纪便有见识，将来一定要中状元。姑奶奶，你的福气是可以写包票的了”。但我吃了豆，却并没有昨夜的豆那么好。<br>　　<br>　　真的，一直到现在，我实在再没有吃到那夜似的好豆，——也不再看到那夜似的好戏了。　　　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】鲁迅   【年代】1922&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="散文" scheme="https://mlone.top/tags/%E6%95%A3%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>送东阳马生序</title>
    <link href="https://mlone.top/2019/08/06/%E9%80%81%E4%B8%9C%E9%98%B3%E9%A9%AC%E7%94%9F%E5%BA%8F/"/>
    <id>https://mlone.top/2019/08/06/送东阳马生序/</id>
    <published>2019-08-05T16:16:11.000Z</published>
    <updated>2019-09-07T16:13:07.879Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】宋濂   【朝代】明</p><br><a id="more"></a><p></p><p>　　余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 ，又患无硕师、名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。<br>　　<br>　　当余之从师也，负箧曳屣，行深山巨谷中，穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意。以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。<br>　　<br>　　今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？<br>　　<br>　　今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵《诗》《书》，无奔走之劳矣；有司业、博士为之师，未有问而不告，求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精，德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！<br>　　<br>　　东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达，与之论辩，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣！其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知余者哉！　　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】宋濂   【朝代】明&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>项脊轩志</title>
    <link href="https://mlone.top/2019/08/06/%E9%A1%B9%E8%84%8A%E8%BD%A9%E5%BF%97/"/>
    <id>https://mlone.top/2019/08/06/项脊轩志/</id>
    <published>2019-08-05T16:14:11.000Z</published>
    <updated>2019-09-05T14:53:48.147Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】归有光  【朝代】明</p><br><a id="more"></a><p></p><p>　　项脊轩，旧南阁子也。室仅方丈，可容一人居。百年老屋，尘泥渗漉，雨泽下注；每移案，顾视，无可置者。又北向，不能得日，日过午已昏。余稍为修葺，使不上漏。前辟四窗，垣墙周庭，以当南日，日影反照，室始洞然。又杂植兰桂竹木于庭，旧时栏楯，亦遂增胜。借书满架，偃仰啸歌，冥然兀坐，万籁有声；而庭堦寂寂，小鸟时来啄食，人至不去。三五之夜，明月半墙，桂影斑驳，风移影动，珊珊可爱。<br>　　<br>　　然余居于此，多可喜，亦多可悲。先是庭中通南北为一。迨诸父异爨，内外多置小门，墙往往而是。东犬西吠，客逾庖而宴，鸡栖于厅。庭中始为篱，已为墙，凡再变矣。家有老妪，尝居于此。妪，先大母婢也，乳二世，先妣抚之甚厚。室西连于中闺，先妣尝一至。妪每谓余曰：”某所，而母立于兹。”妪又曰：”汝姊在吾怀，呱呱而泣；娘以指叩门扉曰：‘儿寒乎？欲食乎？’吾从板外相为应答。”语未毕，余泣，妪亦泣。余自束发，读书轩中，一日，大母过余曰：”吾儿，久不见若影，何竟日默默在此，大类女郎也？”比去，以手阖门，自语曰：”吾家读书久不效，儿之成，则可待乎！”顷之，持一象笏至，曰：”此吾祖太常公宣德间执此以朝，他日汝当用之！”瞻顾遗迹，如在昨日，令人长号不自禁。<br>　　<br>　　轩东，故尝为厨，人往，从轩前过。余扃牖而居，久之，能以足音辨人。轩凡四遭火，得不焚，殆有神护者。<br>　　<br>　　项脊生曰：”蜀清守丹穴，利甲天下，其后秦皇帝筑女怀清台；刘玄德与曹操争天下，诸葛孔明起陇中。方二人之昧昧于一隅也，世何足以知之，余区区处败屋中，方扬眉、瞬目，谓有奇景。人知之者，其谓与坎井之蛙何异？”<br>　　<br>　　余既为此志，后五年，吾妻来归，时至轩中，从余问古事，或凭几学书。吾妻归宁，述诸小妹语曰：”闻姊家有阁子，且何谓阁子也？”其后六年，吾妻死，室坏不修。其后二年，余久卧病无聊，乃使人复葺南阁子，其制稍异于前。然自后余多在外，不常居。<br>庭有枇杷树，吾妻死之年所手植也，今已亭亭如盖矣。　　</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】归有光  【朝代】明&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>醉翁亭记</title>
    <link href="https://mlone.top/2019/08/06/%E9%86%89%E7%BF%81%E4%BA%AD%E8%AE%B0/"/>
    <id>https://mlone.top/2019/08/06/醉翁亭记/</id>
    <published>2019-08-05T16:00:39.000Z</published>
    <updated>2019-09-05T14:55:04.478Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】欧阳修  【朝代】宋</p><br><a id="more"></a><p></p><p>　　环滁皆山也。其西南诸峰，林壑尤美，望之蔚然而深秀者，琅琊也。山行六七里，渐闻水声潺潺而泻出于两峰之间者，酿泉也。峰回路转，有亭翼然临于泉上者，醉翁亭也。作亭者谁？山之僧智仙也。名之者谁？太守自谓也。太守与客来饮于此，饮少辄醉，而年又最高，故自号曰醉翁也。醉翁之意不在酒，在乎山水之间也。山水之乐，得之心而寓之酒也。<br>　　<br>　　若夫日出而林霏开，云归而岩穴暝，晦明变化者，山间之朝暮也。野芳发而幽香，佳木秀而繁阴，风霜高洁，水落而石出者，山间之四时也。朝而往，暮而归，四时之景不同，而乐亦无穷也。<br>　　<br>　　至于负者歌于途，行者休于树，前者呼，后者应，伛偻提携，往来而不绝者，滁人游也。临溪而渔，溪深而鱼肥。酿泉为酒，泉香而酒洌；山肴野蔌，杂然而前陈者，太守宴也。宴酣之乐，非丝非竹，射者中，弈者胜，觥筹交错，起坐而喧哗者，众宾欢也。苍颜白发，颓然乎其间者，太守醉也。<br>　　<br>　　已而夕阳在山，人影散乱，太守归而宾客从也。树林阴翳，鸣声上下，游人去而禽鸟乐也。然而禽鸟知山林之乐，而不知人之乐；人知从太守游而乐，而不知太守之乐其乐也。醉能同其乐，醒能述以文者，太守也。太守谓谁？庐陵欧阳修也。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】欧阳修  【朝代】宋&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>过秦论</title>
    <link href="https://mlone.top/2019/08/05/%E8%BF%87%E7%A7%A6%E8%AE%BA/"/>
    <id>https://mlone.top/2019/08/05/过秦论/</id>
    <published>2019-08-05T15:58:58.000Z</published>
    <updated>2019-09-05T14:55:09.008Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】贾谊  【朝代】汉</p><br><a id="more"></a><p></p><p>　　秦孝公据崤函之固，拥雍州之地，君臣固守以窥周室，有席卷天下，包举宇内，囊括四海之意，并吞八荒之心。当是时也，商君佐之，内立法度，务耕织，修守战之具，外连衡而斗诸侯。于是秦人拱手而取西河之外。<br>　　<br>　　孝公既没，惠文、武、昭襄蒙故业，因遗策，南取汉中，西举巴、蜀，东割膏腴之地，北收要害之郡。诸侯恐惧，会盟而谋弱秦，不爱珍器重宝肥饶之地，以致天下之士，合从缔交，相与为一。当此之时，齐有孟尝，赵有平原，楚有春申，魏有信陵。此四君者，皆明智而忠信，宽厚而爱人，尊贤而重士，约从离衡，兼韩、魏、燕、楚、齐、赵、宋、卫、中山之众。于是六国之士，有宁越、徐尚、苏秦、杜赫之属为之谋，齐明、周最、陈轸、召滑、楼缓、翟景、苏厉、乐毅之徒通其意，吴起、孙膑、带佗、倪良、王廖、田忌、廉颇、赵奢之伦制其兵。尝以十倍之地，百万之众，叩关而攻秦。秦人开关延敌，九国之师，逡巡而不敢进。秦无亡矢遗镞之费，而天下诸侯已困矣。于是从散约败，争割地而赂秦。秦有余力而制其弊，追亡逐北，伏尸百万，流血漂橹；因利乘便，宰割天下，分裂山河。强国请服，弱国入朝。<br>　　<br>　　延及孝文王、庄襄王，享国之日浅，国家无事。<br>　　<br>　　及至始皇，奋六世之余烈，振长策而御宇内，吞二周而亡诸侯，履至尊而制六合，执敲扑而鞭笞天下，威振四海。南取百越之地，以为桂林、象郡；百越之君，俯首系颈，委命下吏。乃使蒙恬北筑长城而守藩篱，却匈奴七百余里；胡人不敢南下而牧马，士不敢弯弓而报怨。于是废先王之道，焚百家之言，以愚黔首；隳名城，杀豪杰；收天下之兵，聚之咸阳，销锋镝，铸以为金人十二，以弱天下之民。然后践华为城，因河为池，据亿丈之城，临不测之渊，以为固。良将劲弩守要害之处，信臣精卒陈利兵而谁何。天下已定，始皇之心，自以为关中之固，金城千里，子孙帝王万世之业也。<br>　　<br>　　始皇既没，余威震于殊俗。然陈涉瓮牖绳枢之子，氓隶之人，而迁徙之徒也；才能不及中人，非有仲尼，墨翟之贤，陶朱、猗顿之富；蹑足行伍之间，而倔起阡陌之中，率疲弊之卒，将数百之众，转而攻秦；斩木为兵，揭竿为旗，天下云集响应，赢粮而景从。山东豪俊遂并起而亡秦族矣。<br>　　<br>　　且夫天下非小弱也，雍州之地，崤函之固，自若也。陈涉之位，非尊于齐、楚、燕、赵、韩、魏、宋、卫、中山之君也；锄櫌棘矜，非铦于钩戟长铩也；谪戍之众，非抗于九国之师也；深谋远虑，行军用兵之道，非及向时之士也。然而成败异变，功业相反，何也？试使山东之国与陈涉度长絜大，比权量力，则不可同年而语矣。然秦以区区之地，致万乘之势，序八州而朝同列，百有余年矣；然后以六合为家，崤函为宫；一夫作难而七庙隳，身死人手，为天下笑者，何也？仁义不施而攻守之势异也。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】贾谊  【朝代】汉&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>张衡传</title>
    <link href="https://mlone.top/2019/08/05/%E5%BC%A0%E8%A1%A1%E4%BC%A0/"/>
    <id>https://mlone.top/2019/08/05/张衡传/</id>
    <published>2019-08-05T15:57:29.000Z</published>
    <updated>2019-09-05T14:55:15.056Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】范晔  【朝代】汉</p><br><a id="more"></a><p></p><p>　　张衡字平子，南阳西鄂人也。衡少善属文，游于三辅，因入京师，观太学，遂通五经，贯六艺。虽才高于世，而无骄尚之情。常从容淡静，不好交接俗人。永元中，举孝廉不行，连辟公府不就。时天下承平日久，自王侯以下莫不逾侈。衡乃拟班固《两都》作《二京赋》，因以讽谏。精思傅会，十年乃成。大将军邓骘奇其才，累召不应。<br>　　<br>　　衡善机巧，尤致思于天文阴阳历算。安帝雅闻衡善术学，公车特征拜郎中，再迁为太史令。遂乃研核阴阳，妙尽璇玑之正，作浑天仪，著《灵宪》、《算罔论》，言甚详明。<br>　　<br>　　顺帝初，再转复为太史令。衡不慕当世，所居之官辄积年不徙。自去史职，五载复还。<br>　　<br>　　阳嘉元年，复造候风地动仪。以精铜铸成，员径八尺，合盖隆起，形似酒尊，饰以篆文山龟鸟兽之形。中有都柱，傍行八道，施关发机。外有八龙，首衔铜丸，下有蟾蜍，张口承之。其牙机巧制，皆隐在尊中，覆盖周密无际。如有地动，尊则振龙，机发吐丸，而蟾蜍衔之。振声激扬，伺者因此觉知。虽一龙发机，而七首不动，寻其方面，乃知震之所在。验之以事，合契若神。自书典所记，未之有也。尝一龙机发而地不觉动，京师学者咸怪其无征。后数日驿至，果地震陇西，于是皆服其妙。自此以后，乃令史官记地动所从方起。<br>　　<br>　　时政事渐损，权移于下，衡因上疏陈事。后迁侍中，帝引在帷幄，讽议左右。尝问天下所疾恶者。宦官惧其毁己，皆共目之，衡乃诡对而出。阉竖恐终为其患，遂共谗之。衡常思图身之事，以为吉凶倚仗，幽微难明。乃作《思玄赋》以宣寄情志。<br>　　<br>　　永和初，出为河间相。时国王骄奢，不遵典宪；又多豪右，共为不轨。衡下车，治威严，整法度，阴知奸党名姓，一时收禽，上下肃然，称为政理。视事三年，上书乞骸骨，征拜尚书。年六十二，永和四年卒。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】范晔  【朝代】汉&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>阿房宫赋</title>
    <link href="https://mlone.top/2019/08/05/%E9%98%BF%E6%88%BF%E5%AE%AB%E8%B5%8B/"/>
    <id>https://mlone.top/2019/08/05/阿房宫赋/</id>
    <published>2019-08-05T15:54:53.000Z</published>
    <updated>2019-09-05T14:53:37.582Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】杜牧 【朝代】唐</p><br><a id="more"></a><p></p><p>　　六王毕，四海一；蜀山兀，阿房出。覆压三百余里，隔离天日。骊山北构而西折，直走咸阳。二川溶溶，流入宫墙。五步一楼，十步一阁；廊腰缦回，檐牙高啄；各抱地势，钩心斗角。盘盘焉，囷囷焉，蜂房水涡，矗不知其几千万落！长桥卧波，未云何龙？复道行空，不霁何虹？高低冥迷，不知西东。歌台暖响，春光融融；舞殿冷袖，风雨凄凄。一日之内，一宫之间，而气候不齐。<br>　　<br>　　妃嫔媵嫱，王子皇孙，辞楼下殿，辇来于秦，朝歌夜弦，为秦宫人。明星荧荧，开妆镜也；绿云扰扰，梳晓鬟也；渭流涨腻，弃脂水也；烟斜雾横，焚椒兰也。雷霆乍惊，宫车过也；辘辘远听，杳不知其所之也。一肌一容，尽态极妍，缦立远视，而望幸焉；有不得见者，三十六年。<br>　　<br>　　燕、赵之收藏，韩、魏之经营，齐、楚之精英，几世几年，剽掠其人，倚叠如山。一旦不能有，输来其间。鼎铛玉石，金块珠砾，弃掷逦迤，秦人视之，亦不甚惜。<br>　　<br>　　嗟乎！一人之心，千万人之心也。秦爱纷奢，人亦念其家；奈何取之尽锱铢，用之如泥沙？使负栋之柱，多于南亩之农夫；架梁之椽，多于机上之工女；钉头磷磷，多于在庾之粟粒；瓦缝参差，多于周身之帛缕；直栏横槛，多于九土之城郭；管弦呕哑，多于市人之言语。使天下之人，不敢言而敢怒；独夫之心，日益骄固。戍卒叫，函谷举；楚人一炬，可怜焦土。<br>　　<br>　　呜呼！灭六国者，六国也，非秦也。族秦者，秦也，非天下也。嗟乎！使六国各爱其人，则足以拒秦；使秦复爱六国之人，则递三世可至万世而为君，谁得而族灭也？秦人不暇自哀，而后人哀之；后人哀之而不鉴之，亦使后人而复哀后人也。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】杜牧 【朝代】唐&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>三峡</title>
    <link href="https://mlone.top/2019/08/05/%E4%B8%89%E5%B3%A1/"/>
    <id>https://mlone.top/2019/08/05/三峡/</id>
    <published>2019-08-05T15:53:17.000Z</published>
    <updated>2019-09-05T14:55:19.958Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】郦道元  【朝代】南北朝</p><br><a id="more"></a><p></p><p>　　自三峡七百里中，两岸连山，略无阙处。重岩叠嶂，隐天蔽日，自非亭午夜分，不见曦月。<br>　　<br>　　至于夏水襄陵，沿溯阻绝。或王命急宣，有时朝发白帝，暮到江陵，其间千二百里，虽乘奔御风，不以疾也。<br>　　<br>　　春冬之时，则素湍绿潭，回清倒影，绝巘多生怪柏，悬泉瀑布，飞漱其间，清荣峻茂，良多趣味。<br>　　<br>　　每至晴初霜旦，林寒涧肃，常有高猿长啸，属引凄异，空谷传响，哀转久绝。故渔者歌曰：“巴东三峡巫峡长，猿鸣三声泪沾裳。”</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】郦道元  【朝代】南北朝&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>岳阳楼记</title>
    <link href="https://mlone.top/2019/08/05/%E5%B2%B3%E9%98%B3%E6%A5%BC%E8%AE%B0/"/>
    <id>https://mlone.top/2019/08/05/岳阳楼记/</id>
    <published>2019-08-05T15:51:30.000Z</published>
    <updated>2019-09-05T14:54:59.643Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>【作者】范仲淹  【朝代】宋</p><br><a id="more"></a><p></p><p>　　庆历四年春，滕子京谪守巴陵郡。越明年，政通人和，百废具兴。乃重修岳阳楼，增其旧制，刻唐贤今人诗赋于其上。属予作文以记之。<br>　　<br>　　予观夫巴陵胜状，在洞庭一湖。衔远山，吞长江，浩浩汤汤，横无际涯；朝晖夕阴，气象万千。此则岳阳楼之大观也，前人之述备矣。然则北通巫峡，南极潇湘，迁客骚人，多会于此，览物之情，得无异乎？<br>　　<br>　　若夫霪雨霏霏，连月不开，阴风怒号，浊浪排空；日星隐曜，山岳潜形；商旅不行，樯倾楫摧；薄暮冥冥，虎啸猿啼。登斯楼也，则有去国怀乡，忧谗畏讥，满目萧然，感极而悲者矣。<br>　　<br>　　至若春和景明，波澜不惊，上下天光，一碧万顷；沙鸥翔集，锦鳞游泳；岸芷汀兰，郁郁青青。而或长烟一空，皓月千里，浮光跃金，静影沉璧，渔歌互答，此乐何极！登斯楼也，则有心旷神怡，宠辱偕忘，把酒临风，其喜洋洋者矣。<br>　　<br>　　嗟夫！予尝求古仁人之心，或异二者之为，何哉？不以物喜，不以己悲；居庙堂之高则忧其民；处江湖之远则忧其君。是进亦忧，退亦忧。然则何时而乐耶？其必曰“先天下之忧而忧，后天下之乐而乐”乎。噫！微斯人，吾谁与归？<br>　　<br>　　时六年九月十五日。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;【作者】范仲淹  【朝代】宋&lt;/p&gt;&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://mlone.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="古诗词" scheme="https://mlone.top/tags/%E5%8F%A4%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
